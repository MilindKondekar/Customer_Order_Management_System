package net.springboot.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import net.springboot.exception.ResourceNotFoundException;
import net.springboot.model.Customer;
import net.springboot.repository.CustomerRepository;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/api/v1/")
public class CustomerController 
{
	@Autowired
	private CustomerRepository customersRepostiory;
	
	//get all customer rest api	
	@GetMapping("/customer")
	public List<Customer> getAllEmployess()
	{
		return  customersRepostiory.findAll();
		
	}
	
	//create customer rest api
	@PostMapping("/customer")
	public Customer createCustomer(@RequestBody Customer customer)
	{
		return customersRepostiory.save(customer);
		
	}
   
	//get customer by id api
	@GetMapping("/customer/{id}")
	public ResponseEntity <Customer> getCustomerbyId(@PathVariable long id)
	{
		Customer customer = customersRepostiory.findById(id)
				.orElseThrow(()-> new ResourceNotFoundException("Customer not exist with id"+id));
		return ResponseEntity.ok(customer);
		
	}
	
	//update customer rest api
	@PutMapping("/customer/{id}")
	public ResponseEntity<Customer> updateCustomer(@PathVariable long id, @RequestBody Customer customerDetails)
	{
		Customer customer = customersRepostiory.findById(id)
				.orElseThrow(()-> new ResourceNotFoundException("Customer not exist with id"+id));
		customer.setFirstName(customerDetails.getFirstName());
		customer.setLastName(customerDetails.getLastName());
		customer.setEmailId(customerDetails.getEmailId());
		
		Customer updatedCostumer = customersRepostiory.save(customer);
		return ResponseEntity.ok(customer);
	}
	
	//delete customer rest api
	@DeleteMapping("/customer/{id}")
	public ResponseEntity<Map<String, Boolean>> deleteCustomer(@PathVariable long id)
	{
		Customer customer = customersRepostiory.findById(id)
				.orElseThrow(()-> new ResourceNotFoundException("Customer not exist with id"+id));
		
		customersRepostiory.delete(customer);
		Map<String, Boolean> response = new HashMap<>();
		response.put("deleted", Boolean.TRUE);
		return ResponseEntity.ok(response);
		
	}
	
}
